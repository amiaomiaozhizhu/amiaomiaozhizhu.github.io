<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LC 2698 求一个整数的惩罚数</title>
      <link href="/2023/12/leetcode/LC%202698%20%E6%B1%82%E4%B8%80%E4%B8%AA%E6%95%B4%E6%95%B0%E7%9A%84%E6%83%A9%E7%BD%9A%E6%95%B0/"/>
      <url>/2023/12/leetcode/LC%202698%20%E6%B1%82%E4%B8%80%E4%B8%AA%E6%95%B4%E6%95%B0%E7%9A%84%E6%83%A9%E7%BD%9A%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="LC-2698-求一个整数的惩罚数"><a href="#LC-2698-求一个整数的惩罚数" class="headerlink" title="LC 2698 求一个整数的惩罚数"></a>LC 2698 求一个整数的惩罚数</h2><p>这是leetcode上的[<a href="https://leetcode.cn/problems/letter-case-permutation/description/">2698. 求一个整数的惩罚数</a>，难度为<strong>中等</strong></p><p>给你一个正整数 <code>n</code> ，请你返回 <code>n</code> 的 <strong>惩罚数</strong> 。</p><p><code>n</code> 的 <strong>惩罚数</strong> 定义为所有满足以下条件 <code>i</code> 的数的平方和：</p><ul><li><code>1 &lt;= i &lt;= n</code></li><li><code>i * i</code> 的十进制表示的字符串可以分割成若干连续子字符串，且这些子字符串对应的整数值之和等于 <code>i</code> 。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 10</span><br><span class="line">输出：182</span><br><span class="line">解释：总共有 3 个整数 i 满足要求：</span><br><span class="line">- 1 ，因为 1 * 1 = 1</span><br><span class="line">- 9 ，因为 9 * 9 = 81 ，且 81 可以分割成 8 + 1 。</span><br><span class="line">- 10 ，因为 10 * 10 = 100 ，且 100 可以分割成 10 + 0 。</span><br><span class="line">因此，10 的惩罚数为 1 + 81 + 100 = 182</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 37</span><br><span class="line">输出：1478</span><br><span class="line">解释：总共有 4 个整数 i 满足要求：</span><br><span class="line">- 1 ，因为 1 * 1 = 1</span><br><span class="line">- 9 ，因为 9 * 9 = 81 ，且 81 可以分割成 8 + 1 。</span><br><span class="line">- 10 ，因为 10 * 10 = 100 ，且 100 可以分割成 10 + 0 。</span><br><span class="line">- 36 ，因为 36 * 36 = 1296 ，且 1296 可以分割成 1 + 29 + 6 。</span><br><span class="line">因此，37 的惩罚数为 1 + 81 + 100 + 1296 = 1478</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 1000</code></li></ul><hr><p>1、从输入角度，选择or不选择，选择分不分割</p><p>2、从答案角度，从哪开始割</p><hr><h3 id="从输入角度"><a href="#从输入角度" class="headerlink" title="从输入角度"></a>从输入角度</h3><p>java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*第一版</span></span><br><span class="line"><span class="comment">执行用时分布</span></span><br><span class="line"><span class="comment">242ms</span></span><br><span class="line"><span class="comment">击败5.06% 使用 Java 的用户</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">消耗内存分布</span></span><br><span class="line"><span class="comment">42.59MB</span></span><br><span class="line"><span class="comment">击败5.01% 使用 Java 的用户</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">punishmentNumber</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            check(i);</span><br><span class="line">            <span class="keyword">if</span>(can)&#123;</span><br><span class="line">                ans += i * i;</span><br><span class="line">                can = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">can</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mul</span> <span class="operator">=</span> num * num;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.valueOf(mul);</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        dfs(<span class="number">0</span>,<span class="number">0</span>,s,n,<span class="number">0</span>,num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> start, String s, <span class="type">int</span> n, <span class="type">int</span> sum,<span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum == num)</span><br><span class="line">            can = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i &lt; n - <span class="number">1</span>)&#123;</span><br><span class="line">            dfs(i + <span class="number">1</span>, start, s, n, sum,num);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">ss</span> <span class="operator">=</span> s.substring(start, i + <span class="number">1</span>);</span><br><span class="line">        sum += Integer.valueOf(ss);</span><br><span class="line">        dfs(i + <span class="number">1</span>, i + <span class="number">1</span>, s, n, sum,num);</span><br><span class="line">        sum -= Integer.valueOf(ss);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">执行用时分布</span></span><br><span class="line"><span class="comment">125ms击败</span></span><br><span class="line"><span class="comment">18.07% 使用 Java 的用户</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">消耗内存分布</span></span><br><span class="line"><span class="comment">42.51MB</span></span><br><span class="line"><span class="comment">击败</span></span><br><span class="line"><span class="comment">5.01%  使用 Java 的用户</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">punishmentNumber</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.valueOf(i * i);</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (dfs(s, i, <span class="number">0</span>, <span class="number">0</span>)) ans += i * i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(String s, <span class="type">int</span> target, <span class="type">int</span> i, <span class="type">int</span> start)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == s.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> target == sum;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sum &gt; target) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &lt; s.length() - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dfs(s, target, i + <span class="number">1</span>, start)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sum += sumUp(s.toCharArray(), start, i + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (dfs(s, target, i + <span class="number">1</span>, i + <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sum -= sumUp(s.toCharArray(), start, i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">sumUp</span><span class="params">(<span class="type">char</span>[] square, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; end; i++) &#123;</span><br><span class="line">            x = x * <span class="number">10</span> + square[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">punishmentNumber</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;num是i * i, target是i&quot;</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">num, target</span>):</span><br><span class="line">            path = []</span><br><span class="line">            can = <span class="literal">False</span></span><br><span class="line">            nlen = <span class="built_in">len</span>(num)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i, satrt</span>):</span><br><span class="line">                <span class="keyword">nonlocal</span> can</span><br><span class="line">                <span class="keyword">if</span> i == nlen:</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">sum</span>(path) == target:</span><br><span class="line">                        can = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">return</span> </span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> i &lt; nlen - <span class="number">1</span>:</span><br><span class="line">                    dfs(i + <span class="number">1</span>, satrt)</span><br><span class="line">                </span><br><span class="line">                ss = num[satrt:i+<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> ss[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span> <span class="keyword">and</span> <span class="built_in">len</span>(ss) &gt; <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                </span><br><span class="line">                path.append(<span class="built_in">int</span>(ss))</span><br><span class="line">                dfs(i+<span class="number">1</span>,i+<span class="number">1</span>)</span><br><span class="line">                path.pop()</span><br><span class="line"></span><br><span class="line">            dfs(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> can</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span>(check(<span class="built_in">str</span>(i * i), i)):</span><br><span class="line">                ans += i * i</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>js代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> punishmentNumber = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_">check</span>(i))&#123;</span><br><span class="line">            ans += i * i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">check</span>(<span class="params">num</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> mul = num * num;</span><br><span class="line">        <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> can = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">var</span> len = <span class="title class_">String</span>(mul).<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">dfs</span>(<span class="params">i, start</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == len)&#123;</span><br><span class="line">                <span class="keyword">if</span>(sum == num)&#123;</span><br><span class="line">                    can = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i &lt; len - <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="title function_">dfs</span>(i + <span class="number">1</span>, start);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> s = <span class="title class_">String</span>(mul).<span class="title function_">substring</span>(start,i+ <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(s.<span class="property">length</span> &gt; <span class="number">1</span> &amp;&amp; s[<span class="number">0</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sum += <span class="title class_">Number</span>(s);</span><br><span class="line">            <span class="title function_">dfs</span>(i + <span class="number">1</span>, i + <span class="number">1</span>);</span><br><span class="line">            sum -= <span class="title class_">Number</span>(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">dfs</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> can;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>从答案角度：</p><p>python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PRE_SUM = [<span class="number">0</span>] * <span class="number">1001</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1001</span>):</span><br><span class="line">    s = <span class="built_in">str</span>(i * i)</span><br><span class="line">    n = <span class="built_in">len</span>(s)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">p, <span class="built_in">sum</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> p == n:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">sum</span> == i</span><br><span class="line">        x = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(p, n):</span><br><span class="line">            x = x * <span class="number">10</span> + <span class="built_in">int</span>(s[j])</span><br><span class="line">            <span class="keyword">if</span> dfs(j + <span class="number">1</span>, <span class="built_in">sum</span> + x):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    PRE_SUM[i] = PRE_SUM[i - <span class="number">1</span>] + (i * i <span class="keyword">if</span> dfs(<span class="number">0</span>, <span class="number">0</span>) <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">punishmentNumber</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> PRE_SUM[n]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
            <tag> 子集型回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LC 306 累加数</title>
      <link href="/2023/12/leetcode/LC%20306%20%E7%B4%AF%E5%8A%A0%E6%95%B0/"/>
      <url>/2023/12/leetcode/LC%20306%20%E7%B4%AF%E5%8A%A0%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="LC-306-累加数"><a href="#LC-306-累加数" class="headerlink" title="LC 306 累加数"></a>LC 306 累加数</h2><p>这是leetcode上的<a href="https://leetcode.cn/problems/letter-case-permutation/description/">306. 累加数</a>，难度为<strong>中等</strong></p><p><strong>累加数</strong> 是一个字符串，组成它的数字可以形成累加序列。</p><p>一个有效的 <strong>累加序列</strong> 必须 <strong>至少</strong> 包含 3 个数。除了最开始的两个数以外，序列中的每个后续数字必须是它之前两个数字之和。</p><p>给你一个只包含数字 <code>&#39;0&#39;-&#39;9&#39;</code> 的字符串，编写一个算法来判断给定输入是否是 <strong>累加数</strong> 。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>说明：</strong>累加序列里的数，除数字 0 之外，<strong>不会</strong> 以 0 开头，所以不会出现 <code>1, 2, 03</code> 或者 <code>1, 02, 3</code> 的情况。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：&quot;112358&quot;</span><br><span class="line">输出：true </span><br><span class="line">解释：累加序列为: 1, 1, 2, 3, 5, 8 。1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：&quot;199100199&quot;</span><br><span class="line">输出：true </span><br><span class="line">解释：累加序列为: 1, 99, 100, 199。1 + 99 = 100, 99 + 100 = 199</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= num.length &lt;= 35</code></li><li><code>num</code> 仅由数字（<code>0</code> - <code>9</code>）组成</li></ul><p><strong>进阶：</strong>你计划如何处理由过大的整数输入导致的溢出?</p><hr><p>1、选择or不选择，放逗号分割</p><p>2、从答案视角(枚举选哪个)</p><p><font size = 5>处理输出溢出，java转换成字符串进位</font></p><hr><h3 id="按输入的角度来看"><a href="#按输入的角度来看" class="headerlink" title="按输入的角度来看"></a>按输入的角度来看</h3><p>python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isAdditiveNumber</span>(<span class="params">self, num: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(num)</span><br><span class="line">        path = []</span><br><span class="line">        ans = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i, start</span>):</span><br><span class="line">            <span class="keyword">if</span> i == n:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(path) &gt;= <span class="number">3</span>:</span><br><span class="line">                    <span class="keyword">nonlocal</span> ans</span><br><span class="line">                    ans = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">            <span class="keyword">if</span> i &lt; n - <span class="number">1</span>:</span><br><span class="line">                dfs(i + <span class="number">1</span>, start)</span><br><span class="line">            </span><br><span class="line">            s = num[start: i + <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">int</span>(s)) != s:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(path) &gt;= <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">if</span> path[-<span class="number">1</span>] + path[-<span class="number">2</span>] != <span class="built_in">int</span>(s):</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            path.append(<span class="built_in">int</span>(s))</span><br><span class="line">            dfs(i + <span class="number">1</span>, i + <span class="number">1</span>)</span><br><span class="line">            path.pop()</span><br><span class="line">        dfs(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAdditiveNumber</span><span class="params">(String num)</span> &#123;</span><br><span class="line">        n = num.length();</span><br><span class="line"></span><br><span class="line">        dfs(<span class="number">0</span>, <span class="number">0</span>, num);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> start, String num)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(path.size() &gt;= <span class="number">3</span>)&#123;</span><br><span class="line">                ans = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i &lt; n - <span class="number">1</span>)&#123;</span><br><span class="line">            dfs(i + <span class="number">1</span>, start, num);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; cur = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> start; j &lt;= i; j++)&#123;</span><br><span class="line">            cur.add(<span class="number">0</span>, num.charAt(j) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cur.size() &gt; <span class="number">1</span> &amp;&amp; cur.get(cur.size() - <span class="number">1</span>) == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(path.size() &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!check(path.get(path.size() - <span class="number">1</span>), path.get(path.size() - <span class="number">2</span>), cur))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        path.add(cur);</span><br><span class="line">        dfs(i + <span class="number">1</span>, i + <span class="number">1</span>, num);</span><br><span class="line">        path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//处理溢出</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(List&lt;Integer&gt; a, List&lt;Integer&gt; b, List&lt;Integer&gt; c)</span>&#123;</span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.size() || i &lt; b.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; a.size()) t += a.get(i);</span><br><span class="line">            <span class="keyword">if</span>(i &lt; b.size()) t += b.get(i);</span><br><span class="line">            ans.add(t % <span class="number">10</span>);</span><br><span class="line">            t /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t &gt; <span class="number">0</span>) ans.add(t);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">ok</span> <span class="operator">=</span> ans.size() == c.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; c.size() &amp;&amp; ok; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ans.get(i) != c.get(i)) ok = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ok;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>js代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isAdditiveNumber = <span class="keyword">function</span> (<span class="params">num</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> path = [];</span><br><span class="line">    <span class="keyword">let</span> ans = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> n = num.<span class="property">length</span>;</span><br><span class="line">    <span class="title function_">dfs</span>(<span class="number">0</span>, <span class="number">0</span>, num);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">dfs</span>(<span class="params">i, start, num</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (path.<span class="property">length</span> &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">                ans = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &lt; n - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="title function_">dfs</span>(i + <span class="number">1</span>, start, num);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> cur = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = start; j &lt;= i; j++) &#123;</span><br><span class="line">            cur.<span class="title function_">unshift</span>(num.<span class="title function_">charAt</span>(j) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cur.<span class="property">length</span> &gt; <span class="number">1</span> &amp;&amp; cur[cur.<span class="property">length</span> - <span class="number">1</span>] === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (path.<span class="property">length</span> &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_">check</span>(path[path.<span class="property">length</span> - <span class="number">1</span>], path[path.<span class="property">length</span> - <span class="number">2</span>], cur)) <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        path.<span class="title function_">push</span>(cur);</span><br><span class="line">        <span class="title function_">dfs</span>(i + <span class="number">1</span>, i + <span class="number">1</span>, num); </span><br><span class="line">        path.<span class="title function_">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">check</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> ans = [];</span><br><span class="line">        <span class="keyword">let</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="title class_">Math</span>.<span class="title function_">max</span>(a.<span class="property">length</span>, b.<span class="property">length</span>); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; a.<span class="property">length</span>) t += a[i];</span><br><span class="line">            <span class="keyword">if</span> (i &lt; b.<span class="property">length</span>) t += b[i];</span><br><span class="line">            ans.<span class="title function_">push</span>(t % <span class="number">10</span>);</span><br><span class="line">            t = <span class="title class_">Math</span>.<span class="title function_">floor</span>(t / <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (t &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            ans.<span class="title function_">push</span>(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> ok = ans.<span class="property">length</span> === c.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; c.<span class="property">length</span> &amp;&amp; ok; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ans[i] !== c[i]) ok = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ok;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="按答案的角度来看"><a href="#按答案的角度来看" class="headerlink" title="按答案的角度来看"></a>按答案的角度来看</h3><p>python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isAdditiveNumber</span>(<span class="params">self, num: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(num)</span><br><span class="line">        path = []</span><br><span class="line">        ans = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i</span>):</span><br><span class="line">            <span class="keyword">if</span> i == n:</span><br><span class="line">                <span class="keyword">nonlocal</span> ans</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">len</span>(path) &gt;= <span class="number">3</span>):</span><br><span class="line">                    ans = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, n):</span><br><span class="line">                s = num[i:j+<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">int</span>(s)) != s:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(path) &gt;= <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> path[-<span class="number">1</span>] + path[-<span class="number">2</span>] != <span class="built_in">int</span>(s):</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                path.append(<span class="built_in">int</span>(s))</span><br><span class="line">                dfs(j + <span class="number">1</span>)</span><br><span class="line">                path.pop()</span><br><span class="line">        dfs(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAdditiveNumber</span><span class="params">(String num)</span> &#123;</span><br><span class="line">        n = num.length();</span><br><span class="line">        dfs(<span class="number">0</span>, num);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, String num)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ans == <span class="literal">true</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(i == n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(path.size() &gt;= <span class="number">3</span>)&#123;</span><br><span class="line">                ans = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; cur = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> num.charAt(i) == <span class="string">&#x27;0&#x27;</span> ? i + <span class="number">1</span> : n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; max; j++)&#123;</span><br><span class="line">            cur.add(<span class="number">0</span>, num.charAt(j) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(path.size() &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!check(path.get(path.size() - <span class="number">1</span>), path.get(path.size() - <span class="number">2</span>), cur))</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            path.add(cur);</span><br><span class="line">            dfs(j + <span class="number">1</span>, num);</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(List&lt;Integer&gt; a, List&lt;Integer&gt; b, List&lt;Integer&gt; c)</span>&#123;</span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.size() || i &lt; b.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; a.size()) t += a.get(i);</span><br><span class="line">            <span class="keyword">if</span>(i &lt; b.size()) t += b.get(i);</span><br><span class="line">            ans.add(t % <span class="number">10</span>);</span><br><span class="line">            t /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t &gt; <span class="number">0</span>) ans.add(t);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">ok</span> <span class="operator">=</span> ans.size() == c.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; c.size() &amp;&amp; ok; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ans.get(i) != c.get(i)) ok = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ok;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
            <tag> 子集型回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LC 131 分割回文串</title>
      <link href="/2023/12/leetcode/LC%20131%20%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
      <url>/2023/12/leetcode/LC%20131%20%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="LC-131-分割回文串"><a href="#LC-131-分割回文串" class="headerlink" title="LC 131 分割回文串"></a>LC 131 分割回文串</h2><p>这是leetcode上的<a href="https://leetcode.cn/problems/palindrome-partitioning/description/"> 131分割回文串 </a>，这是一道中等题</p><p>给你一个字符串 <code>s</code>，请你将 <code>s</code> 分割成一些子串，使每个子串都是 <strong>回文串</strong> 。返回 <code>s</code> 所有可能的分割方案。</p><p><strong>回文串</strong> 是正着读和反着读都一样的字符串。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;aab&quot;</span><br><span class="line">输出：[[&quot;a&quot;,&quot;a&quot;,&quot;b&quot;],[&quot;aa&quot;,&quot;b&quot;]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;a&quot;</span><br><span class="line">输出：[[&quot;a&quot;]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 16</code></li><li><code>s</code> 仅由小写英文字母组成</li></ul><hr><p>枚举相邻两个字母之间要不要分割</p><p><img src="https://ammzz-1309932079.cos.ap-nanjing.myqcloud.com/typora_images202312011451314.png" alt="image.png"></p><p>枚举第一个逗号的位置（或者没有）</p><p>枚举第二个逗号的位置（或者没有）</p><p>回溯三问：</p><ol><li>当前操作？选择回文串 s[i, j], 加入path</li><li>子问题？从下标 &gt; i 的后缀中构造回文分割串</li><li>下一个子问题？从下标 &gt;&#x3D; j + 1 的后缀中构造回文分割</li></ol><p>dfs(i) -&gt; dfs(i + 1) &#x2F; dfs(i + 2) &#x2F; dfs(i + 3)</p><hr><p>python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">partition</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]:</span><br><span class="line">        ans = []</span><br><span class="line">        path = []</span><br><span class="line">        n = <span class="built_in">len</span>(s)</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i</span>):</span><br><span class="line">            <span class="keyword">if</span> i == n:</span><br><span class="line">                ans.append(path.copy())</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, n):</span><br><span class="line">                t = s[i: j + <span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> t == t[::-<span class="number">1</span>]:</span><br><span class="line">                    path.append(t)</span><br><span class="line">                    dfs(j + <span class="number">1</span>)</span><br><span class="line">                    path.pop()</span><br><span class="line">        dfs(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans  </span><br></pre></td></tr></table></figure><p><font size = 5>t &#x3D;&#x3D; t[ : : -1]判断回文</font></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LC 17 电话号码的数字组合</title>
      <link href="/2023/12/leetcode/LC%2017%20%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E6%95%B0%E5%AD%97%E7%BB%84%E5%90%88/"/>
      <url>/2023/12/leetcode/LC%2017%20%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E6%95%B0%E5%AD%97%E7%BB%84%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="LC-17-电话号码的数字组合"><a href="#LC-17-电话号码的数字组合" class="headerlink" title="LC 17 电话号码的数字组合"></a>LC 17 电话号码的数字组合</h2><p>这是leetcode上的<a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/solutions/2059416/hui-su-bu-hui-xie-tao-lu-zai-ci-pythonja-3orv/"> 17.电话号码的字母组合 </a>，难度为中等</p><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 <strong>任意顺序</strong> 返回。</p><p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p><p><img src="https://ammzz-1309932079.cos.ap-nanjing.myqcloud.com/typora_images202312011025517.png" alt="image.png"></p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：digits = &quot;23&quot;</span><br><span class="line">输出：[&quot;ad&quot;,&quot;ae&quot;,&quot;af&quot;,&quot;bd&quot;,&quot;be&quot;,&quot;bf&quot;,&quot;cd&quot;,&quot;ce&quot;,&quot;cf&quot;]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：digits = &quot;&quot;</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：digits = &quot;2&quot;</span><br><span class="line">输出：[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= digits.length &lt;= 4</code></li><li><code>digits[i]</code> 是范围 <code>[&#39;2&#39;, &#39;9&#39;]</code> 的一个数字。</li></ul><hr><p>用一个path保存路径</p><p>回溯三问：</p><ol><li>当前操作？枚举path[i]要填入的字母</li><li>子问题？构造字符串&gt;&#x3D; i的部分</li><li>下一个子问题？构造字符串&gt;&#x3D;i + 1的部分</li></ol><p>dfs(i) -&gt; dfs(i + 1)</p><hr><p>Python代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">MAPPING = <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;def&quot;</span>, <span class="string">&quot;ghi&quot;</span>, <span class="string">&quot;jkl&quot;</span>, <span class="string">&quot;mno&quot;</span>, <span class="string">&quot;pqrs&quot;</span>, <span class="string">&quot;tuv&quot;</span>, <span class="string">&quot;wxyz&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">letterCombinations</span>(<span class="params">self, digits: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        n = <span class="built_in">len</span>(digits)</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> ans</span><br><span class="line">        path = [<span class="string">&quot;&quot;</span>] * n</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i</span>):</span><br><span class="line">            <span class="keyword">if</span> i == n:</span><br><span class="line">                ans.append(<span class="string">&quot;&quot;</span>.join(path))</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> MAPPING[<span class="built_in">int</span>(digits[i])]:</span><br><span class="line">                path[i] = c</span><br><span class="line">                dfs(i + <span class="number">1</span>)</span><br><span class="line">        dfs(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">      </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LC 78 子集</title>
      <link href="/2023/12/leetcode/LC%2078%20%E5%AD%90%E9%9B%86/"/>
      <url>/2023/12/leetcode/LC%2078%20%E5%AD%90%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="LC-78-子集"><a href="#LC-78-子集" class="headerlink" title="LC 78 子集"></a>LC 78 子集</h2><p>这是leetcode上的<a href="https://leetcode.cn/problems/subsets/description/"> 78子集 </a>，难度为中等</p><p>给你一个整数数组 <code>nums</code> ，数组中的元素 <strong>互不相同</strong> 。返回该数组所有可能的子集（幂集）。</p><p>解集 <strong>不能</strong> 包含重复的子集。你可以按 <strong>任意顺序</strong> 返回解集。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3]</span><br><span class="line">输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0]</span><br><span class="line">输出：[[],[0]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li><li><code>nums</code> 中的所有元素 <strong>互不相同</strong></li></ul><hr><p>子集型回溯</p><p>站在输入角度</p><p><img src="https://ammzz-1309932079.cos.ap-nanjing.myqcloud.com/typora_images202312011036997.png"></p><p>每个元素都可以选&#x2F;不选        </p><p>每个数可以在子集中（选）</p><p>也可以不在子集中（不选）</p><p>叶子是答案</p><p>回溯三问：</p><ol><li>当前操作？枚举第 i 个数选&#x2F;不选</li><li>子问题？从下标 &gt;&#x3D; i 的数字中构造子集</li><li>下一个子问题？从下标 &gt;&#x3D; i + 1 的数字中构造子集</li></ol><p>dfs(i) -&gt; dfs(i + 1)</p><p>站在答案角度<br><img src="https://ammzz-1309932079.cos.ap-nanjing.myqcloud.com/typora_images202312011046431.png"></p><p>枚举第一个数选谁</p><p>枚举第二个数选谁……</p><p> 每个节点都是答案</p><p><strong>注意：</strong></p><p><strong>[1, 2]和[2, 1]是重复的子集</strong></p><p><strong>为了避免重复，下一个数应大于当前选择的数</strong></p><p>回溯三问：</p><ol><li>当前操作？枚举一个下标 j &gt;&#x3D; i 的数字，加入path</li><li>子问题？从下标 &gt;&#x3D; i 的数字中构造子集</li><li>下一个子问题？从下标 &gt;&#x3D; j + 1 的数字中构造子集</li></ol><p>dfs(i) -&gt; dfs(i + 1) &#x2F; dfs(i + 2) &#x2F; dfs(i + 3)</p><hr><p>Python代码：</p><p>从输入角度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">subsets</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        ans = []</span><br><span class="line">        path = []</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i</span>):</span><br><span class="line">            <span class="keyword">if</span> i == n:</span><br><span class="line">                ans.append(path.copy())</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            dfs(i + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            path.append(nums[i])</span><br><span class="line">            dfs(i + <span class="number">1</span>)</span><br><span class="line">            path.pop()</span><br><span class="line"></span><br><span class="line">        dfs(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从答案角度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">subsets</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        ans = []</span><br><span class="line">        path = []</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i</span>):</span><br><span class="line">            ans.append(path.copy())</span><br><span class="line">            <span class="keyword">if</span> i == n:</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, n):</span><br><span class="line"></span><br><span class="line">                path.append(nums[j])</span><br><span class="line">                dfs(j + <span class="number">1</span>)</span><br><span class="line">                path.pop()</span><br><span class="line"></span><br><span class="line">        dfs(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LC 784 字母大小写全排列</title>
      <link href="/2023/12/leetcode/LC%20784%20%E5%AD%97%E6%AF%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E5%85%A8%E6%8E%92%E5%88%97/"/>
      <url>/2023/12/leetcode/LC%20784%20%E5%AD%97%E6%AF%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E5%85%A8%E6%8E%92%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="LC-784-字母大小写全排列"><a href="#LC-784-字母大小写全排列" class="headerlink" title="LC 784 字母大小写全排列"></a>LC 784 字母大小写全排列</h2><p>这是leetcode上的<a href="https://leetcode.cn/problems/letter-case-permutation/description/">784字母大小写全排列</a>，难度为<strong>中等</strong></p><p>给定一个字符串 <code>s</code> ，通过将字符串 <code>s</code> 中的每个字母转变大小写，我们可以获得一个新的字符串。</p><p>返回 <em>所有可能得到的字符串集合</em> 。以 <strong>任意顺序</strong> 返回输出。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;a1b2&quot;</span><br><span class="line">输出：[&quot;a1b2&quot;, &quot;a1B2&quot;, &quot;A1b2&quot;, &quot;A1B2&quot;]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;3z4&quot;</span><br><span class="line">输出: [&quot;3z4&quot;,&quot;3Z4&quot;]</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 12</code></li><li><code>s</code> 由小写英文字母、大写英文字母和数字组成</li></ul><hr><p>站在输入角度：</p><p>空的path构造答案，每次选一个填入</p><p>当前操作？path的这个位置填入一个</p><p>子问题？从 &gt;&#x3D; i 的字符串中确定答案</p><p>下一个子问题？从 &gt;&#x3D; i + 1 的字符串中确定答案</p><p>站在答案角度：</p><p>当前操作？确定[i, j] 的答案</p><p>子问题？从下标 &gt;&#x3D; i 的后缀中确定一段为最终答案</p><p>下一个子问题？ 从下标 &gt;&#x3D; j + 1 中确定下一段为最终答案</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;python字符确定</span></span><br><span class="line"><span class="string">字符串.isalnum() : 判断是否是数字字母的组合，如果包含空格返回False。</span></span><br><span class="line"><span class="string">字符串.isalpha() :  判断是否是字母，不区分大小写</span></span><br><span class="line"><span class="string">字符串.isdigit() : 判断是否是数字</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">字符串.isupper() : 判断是否全部为大写字母</span></span><br><span class="line"><span class="string">字符串.islower() : 判断是否全部为小写字母</span></span><br><span class="line"><span class="string">字符串.istitle() : 判断除首字母外全部都是小写</span></span><br><span class="line"><span class="string">字符串.lower(): 转为小写字母</span></span><br><span class="line"><span class="string">字符串.upper(): 转为大写字母</span></span><br><span class="line"><span class="string">字符串.swapcase(): 大写转小写，小写转大写</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><hr><p>python代码：</p><p>从输入角度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">letterCasePermutation</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        n = <span class="built_in">len</span>(s)</span><br><span class="line">        ans = []</span><br><span class="line">        path = [<span class="string">&quot;&quot;</span>] * n</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i</span>):</span><br><span class="line">            <span class="keyword">if</span> i == n:</span><br><span class="line">                ans.append(<span class="string">&quot;&quot;</span>.join(path))</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="string">&quot;直接选择&quot;</span></span><br><span class="line">            path[i] = s[i]</span><br><span class="line">            dfs(i + <span class="number">1</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="string">&quot;转换一下选择&quot;</span></span><br><span class="line">            <span class="keyword">if</span> s[i].isupper():</span><br><span class="line">                path[i] = s[i].lower()</span><br><span class="line">                dfs(i + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">elif</span> s[i].islower():</span><br><span class="line">                path[i] = s[i].upper()</span><br><span class="line">                dfs(i + <span class="number">1</span>)   </span><br><span class="line">        dfs(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>从答案角度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">letterCasePermutation</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        n = <span class="built_in">len</span>(s)</span><br><span class="line">        ans = []</span><br><span class="line">        path = <span class="built_in">list</span>(s)</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i</span>):</span><br><span class="line">            ans.append(<span class="string">&quot;&quot;</span>.join(path))</span><br><span class="line">            <span class="keyword">if</span> i == n:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="string">&quot;遍历答案将每个变或者不变&quot;</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, n):</span><br><span class="line">                <span class="keyword">if</span> path[j].isalpha():</span><br><span class="line">                    path[j] = path[j].swapcase()</span><br><span class="line">                    dfs(j + <span class="number">1</span>)</span><br><span class="line">                    path[j] = path[j].swapcase()</span><br><span class="line">        dfs(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
