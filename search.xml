<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LC 50 Pow(x, n)</title>
      <link href="/2023/12/leetcode/LC%2050%20Pow(x,%20n)/"/>
      <url>/2023/12/leetcode/LC%2050%20Pow(x,%20n)/</url>
      
        <content type="html"><![CDATA[<h2 id="LC-50-Pow-x-n"><a href="#LC-50-Pow-x-n" class="headerlink" title="LC 50 Pow(x, n)"></a>LC 50 Pow(x, n)</h2><p>这是leetcode上的<a href="https://leetcode.cn/problems/powx-n/">50. Pow(x, n)</a>，难度为中等</p><p>实现 <a href="https://www.cplusplus.com/reference/valarray/pow/">pow(<em>x</em>, <em>n</em>)</a> ，即计算 <code>x</code> 的整数 <code>n</code> 次幂函数（即，x^n^ ）。</p><p><strong>示例 1：</strong></p><p>输入：x &#x3D; 2.00000, n &#x3D; 10<br>输出：1024.00000</p><p><strong>示例 2：</strong></p><p>输入：x &#x3D; 2.10000, n &#x3D; 3<br>输出：9.26100</p><p><strong>示例 3：</strong></p><p>输入：x &#x3D; 2.00000, n &#x3D; -2<br>输出：0.25000<br>解释：2^-2^ &#x3D; 1&#x2F;2^2^ &#x3D; 1&#x2F;4 &#x3D; 0.25</p><p><strong>提示：</strong></p><ul><li><code>-100.0 &lt; x &lt; 100.0</code></li><li>-2^31^ &lt;&#x3D; n &lt;&#x3D; 2^31^-1</li><li><code>n</code> 是一个整数</li><li>要么 <code>x</code> 不为零，要么 <code>n &gt; 0</code> 。</li><li>-10^4^ &lt;&#x3D; x^n^ &lt;&#x3D; 10^4^</li></ul><hr><p>java代码</p><p>-2147483648 变成正数之后就超过 int 范围了！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">myPow</span><span class="params">(<span class="type">double</span> x, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">N</span> <span class="operator">=</span> n;</span><br><span class="line">        <span class="keyword">return</span> N &gt;= <span class="number">0</span> ? quickMul(x, N) : <span class="number">1.0</span> / quickMul(x, -N);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="title function_">quickMul</span><span class="params">(<span class="type">double</span> x, <span class="type">long</span> n)</span>&#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(; n &gt; <span class="number">0</span>; n /= <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n % <span class="number">2</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                res *= x;</span><br><span class="line">            &#125;</span><br><span class="line">            x = x * x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">myPow</span><span class="params">(<span class="type">double</span> x, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1.0</span> / pow(x, -n);</span><br><span class="line">        <span class="keyword">return</span> pow(x, n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">pow</span><span class="params">(<span class="type">double</span> x, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">res</span> <span class="operator">=</span> pow(x, n / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> x * res * res;</span><br><span class="line">        <span class="keyword">return</span> res * res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">myPow</span>(<span class="params">self, x: <span class="built_in">float</span>, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">        <span class="keyword">if</span> x == <span class="number">0.0</span>: <span class="keyword">return</span> <span class="number">0.0</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">pow</span>(<span class="params">x, n</span>):</span><br><span class="line">            res = <span class="number">1.0</span></span><br><span class="line">            <span class="keyword">while</span> n:</span><br><span class="line">                <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">                    res *= x</span><br><span class="line">                x = x * x</span><br><span class="line">                n //= <span class="number">2</span></span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(x, n) <span class="keyword">if</span> n &gt;= <span class="number">0</span> <span class="keyword">else</span> <span class="number">1.0</span> / <span class="built_in">pow</span>(x, -n)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速幂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第375场周赛</title>
      <link href="/leetcode%E5%91%A8%E8%B5%9B/%E7%AC%AC375%E5%9C%BA%E5%91%A8%E8%B5%9B/"/>
      <url>/leetcode%E5%91%A8%E8%B5%9B/%E7%AC%AC375%E5%9C%BA%E5%91%A8%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h2 id="第375场周赛"><a href="#第375场周赛" class="headerlink" title="第375场周赛"></a>第375场周赛</h2><h3 id="LC-2960-统计已测试设备"><a href="#LC-2960-统计已测试设备" class="headerlink" title="LC 2960 统计已测试设备"></a>LC 2960 统计已测试设备</h3><p>给你一个长度为 <code>n</code> 、下标从 <strong>0</strong> 开始的整数数组 <code>batteryPercentages</code> ，表示 <code>n</code> 个设备的电池百分比。</p><p>你的任务是按照顺序测试每个设备 <code>i</code>，执行以下测试操作：</p><ul><li><p>如果</p><p> batteryPercentages[i]大于0：</p><ul><li><strong>增加</strong> 已测试设备的计数。</li><li>将下标在 <code>[i + 1, n - 1]</code> 的所有设备的电池百分比减少 <code>1</code>，确保它们的电池百分比 <strong>不会低于</strong> <code>0</code> ，即 <code>batteryPercentages[j] = max(0, batteryPercentages[j] - 1)</code>。</li><li>移动到下一个设备。</li></ul></li><li><p>否则，移动到下一个设备而不执行任何测试。</p></li></ul><p>返回一个整数，表示按顺序执行测试操作后 <strong>已测试设备</strong> 的数量。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：batteryPercentages = [1,1,2,1,3]</span><br><span class="line">输出：3</span><br><span class="line">解释：按顺序从设备 0 开始执行测试操作：</span><br><span class="line">在设备 0 上，batteryPercentages[0] &gt; 0 ，现在有 1 个已测试设备，batteryPercentages 变为 [1,0,1,0,2] 。</span><br><span class="line">在设备 1 上，batteryPercentages[1] == 0 ，移动到下一个设备而不进行测试。</span><br><span class="line">在设备 2 上，batteryPercentages[2] &gt; 0 ，现在有 2 个已测试设备，batteryPercentages 变为 [1,0,1,0,1] 。</span><br><span class="line">在设备 3 上，batteryPercentages[3] == 0 ，移动到下一个设备而不进行测试。</span><br><span class="line">在设备 4 上，batteryPercentages[4] &gt; 0 ，现在有 3 个已测试设备，batteryPercentages 保持不变。</span><br><span class="line">因此，答案是 3 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：batteryPercentages = [0,1,2]</span><br><span class="line">输出：2</span><br><span class="line">解释：按顺序从设备 0 开始执行测试操作：</span><br><span class="line">在设备 0 上，batteryPercentages[0] == 0 ，移动到下一个设备而不进行测试。</span><br><span class="line">在设备 1 上，batteryPercentages[1] &gt; 0 ，现在有 1 个已测试设备，batteryPercentages 变为 [0,1,1] 。</span><br><span class="line">在设备 2 上，batteryPercentages[2] &gt; 0 ，现在有 2 个已测试设备，batteryPercentages 保持不变。</span><br><span class="line">因此，答案是 2 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n == batteryPercentages.length &lt;= 100 </code></li><li><code>0 &lt;= batteryPercentages[i] &lt;= 100</code></li></ul><p>比赛java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countTestedDevices</span><span class="params">(<span class="type">int</span>[] batteryPercentages)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> batteryPercentages.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(batteryPercentages[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                ans++;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(batteryPercentages[j] &gt; <span class="number">0</span>) batteryPercentages[j]--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、初始化dec &#x3D; 0, 表示需要减一的次数</p><p>2、设x &#x3D; batteryPercentages[i]，如果x-dec &gt; 0，即符合，ans++，后面的数都-1</p><p>python代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">countTestedDevices</span>(<span class="params">self, batteryPercentages: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># ans = 0</span></span><br><span class="line">        des = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(batteryPercentages):</span><br><span class="line">            <span class="keyword">if</span> x - des &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># ans += 1</span></span><br><span class="line">                des += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> des</span><br></pre></td></tr></table></figure><hr><h3 id="LC-2961-双模幂运算"><a href="#LC-2961-双模幂运算" class="headerlink" title="LC 2961 双模幂运算"></a>LC 2961 双模幂运算</h3><p>给你一个下标从 <strong>0</strong> 开始的二维数组 <code>variables</code> ，其中 <code>variables[i] = [ai, bi, ci, mi]</code>，以及一个整数 <code>target</code> 。</p><p>如果满足以下公式，则下标 <code>i</code> 是 <strong>好下标</strong>：</p><ul><li><code>0 &lt;= i &lt; variables.length</code></li><li>((ai<sup>bi</sup> % 10)<sup>ci</sup>) % mi &#x3D;&#x3D; target</li></ul><p>返回一个由 <strong>好下标</strong> 组成的数组，<strong>顺序不限</strong> 。</p><p><strong>示例 1：</strong></p><p>输入：variables &#x3D; [[2,3,3,10],[3,3,3,1],[6,1,1,4]], target &#x3D; 2<br>输出：[0,2]<br>解释：对于 variables 数组中的每个下标 i ：</p><ol><li>对于下标 0 ，variables[0] &#x3D; [2,3,3,10] ，(2<sup>3</sup> % 10)<sup>3</sup> % 10 &#x3D; 2 。</li><li>对于下标 1 ，variables[1] &#x3D; [3,3,3,1] ，(3<sup>3</sup> % 10)<sup>3</sup> % 1 &#x3D; 0 。</li><li>对于下标 2 ，variables[2] &#x3D; [6,1,1,4] ，(6<sup>1</sup> % 10)<sup>1</sup> % 4 &#x3D; 2 。<br>因此，返回 [0,2] 作为答案。</li></ol><p><strong>示例 2：</strong></p><p>输入：variables &#x3D; [[39,3,1000,1000]], target &#x3D; 17<br>输出：[]<br>解释：对于 variables 数组中的每个下标 i ：</p><ol><li>对于下标 0 ，variables[0] &#x3D; [39,3,1000,1000] ，(39<sup>3</sup> % 10)<sup>1000</sup> % 1000 &#x3D; 1 。<br>因此，返回 [] 作为答案。</li></ol><p><strong>提示：</strong></p><ul><li>1 &lt;&#x3D; variables.length &lt;&#x3D; 100</li><li>variables[i] &#x3D;&#x3D; [ai, bi, ci, mi]</li><li>1 &lt;&#x3D; ai, bi, ci, mi &lt;&#x3D; 10<sup>3</sup></li><li>0 &lt;&#x3D; target &lt;&#x3D; 10<sup>3</sup></li></ul><p>比赛pyhon代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getGoodIndices</span>(<span class="params">self, variables: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(variables):</span><br><span class="line">            <span class="keyword">if</span> ((x[<span class="number">0</span>] ** x[<span class="number">1</span>] % <span class="number">10</span>) ** x[<span class="number">2</span>] ) % x[<span class="number">3</span>] == target:</span><br><span class="line">                ans.append(i)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>python 的 <code>pow(a,b,m)</code> a<sup>b</sup> % m</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getGoodIndices</span>(<span class="params">self, variables: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">for</span> i, (a,b,c,m) <span class="keyword">in</span> <span class="built_in">enumerate</span>(variables):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">pow</span>(<span class="built_in">pow</span>(a, b, <span class="number">10</span>), c, m) == target:</span><br><span class="line">                ans.append(i)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getGoodIndices</span>(<span class="params">self, variables: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">return</span> [i <span class="keyword">for</span> i, (a, b, c, m) <span class="keyword">in</span> <span class="built_in">enumerate</span>(variables)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">pow</span>(<span class="built_in">pow</span>(a, b, <span class="number">10</span>), c, m) == target]</span><br></pre></td></tr></table></figure><p>使用快速幂</p><p><a href="https://leetcode.cn/problems/powx-n/">50. Pow(x, n)</a></p><p>一般涉及到取模的题目，会用到如下两个恒等式</p><p>(a+b) mod m&#x3D;((a mod m)+(b mod m)) mod m</p><p>(a⋅b) mod m&#x3D;((a mod m)⋅(b mod m)) mod m</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">getGoodIndices</span><span class="params">(<span class="type">int</span>[][] variables, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; variables.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span>[] v = variables[i];</span><br><span class="line">            <span class="keyword">if</span> (pow(pow(v[<span class="number">0</span>], v[<span class="number">1</span>], <span class="number">10</span>), v[<span class="number">2</span>], v[<span class="number">3</span>]) == target) &#123;</span><br><span class="line">                ans.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="title function_">pow</span><span class="params">(<span class="type">long</span> x, <span class="type">int</span> n, <span class="type">int</span> mod)</span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(; n &gt; <span class="number">0</span>; n /= <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n % <span class="number">2</span> &gt; <span class="number">0</span>)</span><br><span class="line">                res = res * x % mod;</span><br><span class="line">            x = x * x % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="LC-2962-统计最大元素出现至少-K-次的子数组"><a href="#LC-2962-统计最大元素出现至少-K-次的子数组" class="headerlink" title="LC 2962  统计最大元素出现至少 K 次的子数组"></a>LC 2962  统计最大元素出现至少 K 次的子数组</h3><p>给你一个整数数组 <code>nums</code> 和一个 <strong>正整数</strong> <code>k</code> 。</p><p>请你统计有多少满足 「 <code>nums</code> 中的 <strong>最大</strong> 元素」至少出现 <code>k</code> 次的子数组，并返回满足这一条件的子数组的数目。</p><p>子数组是数组中的一个连续元素序列。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,3,2,3,3], k = 2</span><br><span class="line">输出：6</span><br><span class="line">解释：包含元素 3 至少 2 次的子数组为：[1,3,2,3]、[1,3,2,3,3]、[3,2,3]、[3,2,3,3]、[2,3,3] 和 [3,3] 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,4,2,1], k = 3</span><br><span class="line">输出：0</span><br><span class="line">解释：没有子数组包含元素 4 至少 3 次。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>5</sup></li><li>1 &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>6</sup></li><li>1 &lt;&#x3D; k &lt;&#x3D; 10<sup>5</sup></li></ul><p>比赛python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">countSubarrays</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        m = <span class="built_in">max</span>(nums)</span><br><span class="line">        arr = []</span><br><span class="line">        <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> x == m:</span><br><span class="line">                arr.append(i)</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> right &lt; <span class="built_in">len</span>(arr):</span><br><span class="line">            <span class="keyword">if</span> right &gt;= k - <span class="number">1</span>:</span><br><span class="line">                ans += arr[right - k + <span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> right + <span class="number">1</span> &lt; <span class="built_in">len</span>(arr):</span><br><span class="line">                    ans += (arr[right + <span class="number">1</span>] - arr[right] - <span class="number">1</span>) * (arr[right - k + <span class="number">1</span>] + <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">if</span> right == <span class="built_in">len</span>(arr) - <span class="number">1</span>:</span><br><span class="line">                    ans += (<span class="built_in">len</span>(nums) - <span class="number">1</span> - arr[right]) * (arr[right - k + <span class="number">1</span>] + <span class="number">1</span>)</span><br><span class="line">            right += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>滑动窗口，参考<a href="https://leetcode.cn/problems/subarray-product-less-than-k/description/">713. 乘积小于 K 的子数组</a></p><p>灵神</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">本题算法如下：</span><br><span class="line"></span><br><span class="line">设 mx = max⁡(nums)。</span><br><span class="line">右端点 right 从左到右遍历 nums遍历到元素 x = nums[right]时，如果 x = mx，就把计数器 cntMx 加一。</span><br><span class="line">如果此时 cntMx = k，则不断右移左指针 left，直到窗口内的 mx 的出现次数小于k为止。此时，对于右端点为 right 且左端点小于 left的子数组，mx的出现次数都至少为k，把答案增加 left。</span><br><span class="line">例如示例 1，当右端点移到第二个3时，左端点移到2，此时 [1,3,2,3]和[3,2,3] 是满足要求的。当右端点移到第三个3时，左端点也移到第三个3，此时 [1,3,2,3,3],[3,2,3,3],[2,3,3],[3,3]都是满足要求的。所以答案为 2 + 4 = 6</span><br><span class="line"></span><br><span class="line">作者：灵茶山艾府</span><br><span class="line">链接：https://leetcode.cn/problems/count-subarrays-where-max-element-appears-at-least-k-times/</span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">countSubarrays</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="comment">//左端点是慢慢变大的</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> getMax(nums);</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt_max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(num == max)&#123;</span><br><span class="line">                cnt_max++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(cnt_max == k)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[left] == max)&#123;</span><br><span class="line">                    cnt_max--;</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            ans += left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n : nums)&#123;</span><br><span class="line">            max = Math.max(n, max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="LC-2963-统计好分割方案的数目"><a href="#LC-2963-统计好分割方案的数目" class="headerlink" title="LC 2963  统计好分割方案的数目"></a>LC 2963  统计好分割方案的数目</h3><p>给你一个下标从 <strong>0</strong> 开始、由 <strong>正整数</strong> 组成的数组 <code>nums</code>。</p><p>将数组分割成一个或多个 <strong>连续</strong> 子数组，如果不存在包含了相同数字的两个子数组，则认为是一种 <strong>好分割方案</strong> 。</p><p>返回 <code>nums</code> 的 <strong>好分割方案</strong> 的 <strong>数目</strong>。</p><p>由于答案可能很大，请返回答案对  10<sup>9</sup> + 7  <strong>取余</strong> 的结果。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3,4]</span><br><span class="line">输出：8</span><br><span class="line">解释：有 8 种 好分割方案 ：([1], [2], [3], [4]), ([1], [2], [3,4]), ([1], [2,3], [4]), ([1], [2,3,4]), ([1,2], [3], [4]), ([1,2], [3,4]), ([1,2,3], [4]) 和 ([1,2,3,4]) 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,1,1,1]</span><br><span class="line">输出：1</span><br><span class="line">解释：唯一的 好分割方案 是：([1,1,1,1]) 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,1,3]</span><br><span class="line">输出：2</span><br><span class="line">解释：有 2 种 好分割方案 ：([1,2,1], [3]) 和 ([1,2,1,3]) 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>5</sup></li><li>1 &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>9</sup></li></ul><p>区间合并</p><p><img src="https://ammzz-1309932079.cos.ap-nanjing.myqcloud.com/typora_images202312121052235.png" alt="image-20231212105220187"></p><p><strong>写法一：只记录右端点</strong></p><p>python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numberOfGoodPartitions</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        r = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            r[x] = i</span><br><span class="line">        max_r = m = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            max_r = <span class="built_in">max</span>(max_r, r[x])</span><br><span class="line">            <span class="keyword">if</span> max_r == i:</span><br><span class="line">                m += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(<span class="number">2</span>, m - <span class="number">1</span>, <span class="number">10</span>**<span class="number">9</span> + <span class="number">7</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>写法二：</p><p>代码实现时，用一个哈希表&#x2F;有序集合记录每个元素首次出现的位置和最后一次出现的位置，每个元素就对应着一个不可分割的区间。然后按照 <a href="https://leetcode.cn/problems/merge-intervals/description/">56. 合并区间 </a> 的做法，把这些区间都合并起来。假设合并后的区间个数为 m，那么答案就是2^m-1^记得取模。</p><p>注意代码中少统计了最后一段区间，所以直接算的是 2^m^</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numberOfGoodPartitions</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        ps = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> x <span class="keyword">in</span> ps:</span><br><span class="line">                ps[x][<span class="number">1</span>] = i  <span class="comment"># 更新区间右端点</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ps[x] = [i, i]</span><br><span class="line"></span><br><span class="line">        a = <span class="built_in">sorted</span>(ps.values(), key=<span class="keyword">lambda</span> p: p[<span class="number">0</span>])  <span class="comment"># 按区间左端点排序</span></span><br><span class="line"></span><br><span class="line">        m = <span class="number">0</span></span><br><span class="line">        max_r = a[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> left, right <span class="keyword">in</span> a[<span class="number">1</span>:]:</span><br><span class="line">            <span class="keyword">if</span> left &gt; max_r:  <span class="comment"># 无法合并</span></span><br><span class="line">                m += <span class="number">1</span></span><br><span class="line">            max_r = <span class="built_in">max</span>(max_r, right)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(<span class="number">2</span>, m, <span class="number">1_000_000_007</span>)</span><br><span class="line"></span><br><span class="line">作者：灵茶山艾府</span><br><span class="line">链接：https://leetcode.cn/problems/count-the-number-of-good-partitions/</span><br><span class="line">来源：力扣（LeetCode）</span><br></pre></td></tr></table></figure><p>相似题目</p><p><a href="https://leetcode.cn/problems/merge-intervals/description/">56. 合并区间</a></p><p><a href="https://leetcode.cn/problems/jump-game/">55. 跳跃游戏</a></p><p><a href="https://leetcode.cn/problems/count-ways-to-group-overlapping-ranges/">2580. 统计将重叠区间合并成组的方案数 </a></p><p><a href="https://leetcode.cn/problems/split-the-array-to-make-coprime-products/description/">2584. 分割数组使乘积互质</a></p><p><a href="https://leetcode.cn/problems/find-maximal-uncovered-ranges/">2655. 寻找最大长度的未覆盖区间 </a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
          <category> 周赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周赛 </tag>
            
            <tag> 快速幂 </tag>
            
            <tag> 滑动窗口 </tag>
            
            <tag> 合并区间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LC 2698 求一个整数的惩罚数</title>
      <link href="/2023/12/leetcode/LC%202698%20%E6%B1%82%E4%B8%80%E4%B8%AA%E6%95%B4%E6%95%B0%E7%9A%84%E6%83%A9%E7%BD%9A%E6%95%B0/"/>
      <url>/2023/12/leetcode/LC%202698%20%E6%B1%82%E4%B8%80%E4%B8%AA%E6%95%B4%E6%95%B0%E7%9A%84%E6%83%A9%E7%BD%9A%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="LC-2698-求一个整数的惩罚数"><a href="#LC-2698-求一个整数的惩罚数" class="headerlink" title="LC 2698 求一个整数的惩罚数"></a>LC 2698 求一个整数的惩罚数</h2><p>这是leetcode上的[<a href="https://leetcode.cn/problems/letter-case-permutation/description/">2698. 求一个整数的惩罚数</a>，难度为<strong>中等</strong></p><p>给你一个正整数 <code>n</code> ，请你返回 <code>n</code> 的 <strong>惩罚数</strong> 。</p><p><code>n</code> 的 <strong>惩罚数</strong> 定义为所有满足以下条件 <code>i</code> 的数的平方和：</p><ul><li><code>1 &lt;= i &lt;= n</code></li><li><code>i * i</code> 的十进制表示的字符串可以分割成若干连续子字符串，且这些子字符串对应的整数值之和等于 <code>i</code> 。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 10</span><br><span class="line">输出：182</span><br><span class="line">解释：总共有 3 个整数 i 满足要求：</span><br><span class="line">- 1 ，因为 1 * 1 = 1</span><br><span class="line">- 9 ，因为 9 * 9 = 81 ，且 81 可以分割成 8 + 1 。</span><br><span class="line">- 10 ，因为 10 * 10 = 100 ，且 100 可以分割成 10 + 0 。</span><br><span class="line">因此，10 的惩罚数为 1 + 81 + 100 = 182</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 37</span><br><span class="line">输出：1478</span><br><span class="line">解释：总共有 4 个整数 i 满足要求：</span><br><span class="line">- 1 ，因为 1 * 1 = 1</span><br><span class="line">- 9 ，因为 9 * 9 = 81 ，且 81 可以分割成 8 + 1 。</span><br><span class="line">- 10 ，因为 10 * 10 = 100 ，且 100 可以分割成 10 + 0 。</span><br><span class="line">- 36 ，因为 36 * 36 = 1296 ，且 1296 可以分割成 1 + 29 + 6 。</span><br><span class="line">因此，37 的惩罚数为 1 + 81 + 100 + 1296 = 1478</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 1000</code></li></ul><hr><p>1、从输入角度，选择or不选择，选择分不分割</p><p>2、从答案角度，从哪开始割</p><hr><h3 id="从输入角度"><a href="#从输入角度" class="headerlink" title="从输入角度"></a>从输入角度</h3><p>java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*第一版</span></span><br><span class="line"><span class="comment">执行用时分布</span></span><br><span class="line"><span class="comment">242ms</span></span><br><span class="line"><span class="comment">击败5.06% 使用 Java 的用户</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">消耗内存分布</span></span><br><span class="line"><span class="comment">42.59MB</span></span><br><span class="line"><span class="comment">击败5.01% 使用 Java 的用户</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">punishmentNumber</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            check(i);</span><br><span class="line">            <span class="keyword">if</span>(can)&#123;</span><br><span class="line">                ans += i * i;</span><br><span class="line">                can = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">can</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mul</span> <span class="operator">=</span> num * num;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.valueOf(mul);</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        dfs(<span class="number">0</span>,<span class="number">0</span>,s,n,<span class="number">0</span>,num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> start, String s, <span class="type">int</span> n, <span class="type">int</span> sum,<span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum == num)</span><br><span class="line">            can = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i &lt; n - <span class="number">1</span>)&#123;</span><br><span class="line">            dfs(i + <span class="number">1</span>, start, s, n, sum,num);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">ss</span> <span class="operator">=</span> s.substring(start, i + <span class="number">1</span>);</span><br><span class="line">        sum += Integer.valueOf(ss);</span><br><span class="line">        dfs(i + <span class="number">1</span>, i + <span class="number">1</span>, s, n, sum,num);</span><br><span class="line">        sum -= Integer.valueOf(ss);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">执行用时分布</span></span><br><span class="line"><span class="comment">125ms击败</span></span><br><span class="line"><span class="comment">18.07% 使用 Java 的用户</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">消耗内存分布</span></span><br><span class="line"><span class="comment">42.51MB</span></span><br><span class="line"><span class="comment">击败</span></span><br><span class="line"><span class="comment">5.01%  使用 Java 的用户</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">punishmentNumber</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.valueOf(i * i);</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (dfs(s, i, <span class="number">0</span>, <span class="number">0</span>)) ans += i * i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(String s, <span class="type">int</span> target, <span class="type">int</span> i, <span class="type">int</span> start)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == s.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> target == sum;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sum &gt; target) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &lt; s.length() - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dfs(s, target, i + <span class="number">1</span>, start)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sum += sumUp(s.toCharArray(), start, i + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (dfs(s, target, i + <span class="number">1</span>, i + <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sum -= sumUp(s.toCharArray(), start, i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">sumUp</span><span class="params">(<span class="type">char</span>[] square, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; end; i++) &#123;</span><br><span class="line">            x = x * <span class="number">10</span> + square[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">punishmentNumber</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;num是i * i, target是i&quot;</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">num, target</span>):</span><br><span class="line">            path = []</span><br><span class="line">            can = <span class="literal">False</span></span><br><span class="line">            nlen = <span class="built_in">len</span>(num)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i, satrt</span>):</span><br><span class="line">                <span class="keyword">nonlocal</span> can</span><br><span class="line">                <span class="keyword">if</span> i == nlen:</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">sum</span>(path) == target:</span><br><span class="line">                        can = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">return</span> </span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> i &lt; nlen - <span class="number">1</span>:</span><br><span class="line">                    dfs(i + <span class="number">1</span>, satrt)</span><br><span class="line">                </span><br><span class="line">                ss = num[satrt:i+<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> ss[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span> <span class="keyword">and</span> <span class="built_in">len</span>(ss) &gt; <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                </span><br><span class="line">                path.append(<span class="built_in">int</span>(ss))</span><br><span class="line">                dfs(i+<span class="number">1</span>,i+<span class="number">1</span>)</span><br><span class="line">                path.pop()</span><br><span class="line"></span><br><span class="line">            dfs(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> can</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span>(check(<span class="built_in">str</span>(i * i), i)):</span><br><span class="line">                ans += i * i</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>js代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> punishmentNumber = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_">check</span>(i))&#123;</span><br><span class="line">            ans += i * i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">check</span>(<span class="params">num</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> mul = num * num;</span><br><span class="line">        <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> can = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">var</span> len = <span class="title class_">String</span>(mul).<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">dfs</span>(<span class="params">i, start</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == len)&#123;</span><br><span class="line">                <span class="keyword">if</span>(sum == num)&#123;</span><br><span class="line">                    can = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i &lt; len - <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="title function_">dfs</span>(i + <span class="number">1</span>, start);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> s = <span class="title class_">String</span>(mul).<span class="title function_">substring</span>(start,i+ <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(s.<span class="property">length</span> &gt; <span class="number">1</span> &amp;&amp; s[<span class="number">0</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sum += <span class="title class_">Number</span>(s);</span><br><span class="line">            <span class="title function_">dfs</span>(i + <span class="number">1</span>, i + <span class="number">1</span>);</span><br><span class="line">            sum -= <span class="title class_">Number</span>(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">dfs</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> can;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>从答案角度：</p><p>python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PRE_SUM = [<span class="number">0</span>] * <span class="number">1001</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1001</span>):</span><br><span class="line">    s = <span class="built_in">str</span>(i * i)</span><br><span class="line">    n = <span class="built_in">len</span>(s)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">p, <span class="built_in">sum</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> p == n:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">sum</span> == i</span><br><span class="line">        x = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(p, n):</span><br><span class="line">            x = x * <span class="number">10</span> + <span class="built_in">int</span>(s[j])</span><br><span class="line">            <span class="keyword">if</span> dfs(j + <span class="number">1</span>, <span class="built_in">sum</span> + x):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    PRE_SUM[i] = PRE_SUM[i - <span class="number">1</span>] + (i * i <span class="keyword">if</span> dfs(<span class="number">0</span>, <span class="number">0</span>) <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">punishmentNumber</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> PRE_SUM[n]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
            <tag> 子集型回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LC 306 累加数</title>
      <link href="/2023/12/leetcode/LC%20306%20%E7%B4%AF%E5%8A%A0%E6%95%B0/"/>
      <url>/2023/12/leetcode/LC%20306%20%E7%B4%AF%E5%8A%A0%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="LC-306-累加数"><a href="#LC-306-累加数" class="headerlink" title="LC 306 累加数"></a>LC 306 累加数</h2><p>这是leetcode上的<a href="https://leetcode.cn/problems/letter-case-permutation/description/">306. 累加数</a>，难度为<strong>中等</strong></p><p><strong>累加数</strong> 是一个字符串，组成它的数字可以形成累加序列。</p><p>一个有效的 <strong>累加序列</strong> 必须 <strong>至少</strong> 包含 3 个数。除了最开始的两个数以外，序列中的每个后续数字必须是它之前两个数字之和。</p><p>给你一个只包含数字 <code>&#39;0&#39;-&#39;9&#39;</code> 的字符串，编写一个算法来判断给定输入是否是 <strong>累加数</strong> 。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>说明：</strong>累加序列里的数，除数字 0 之外，<strong>不会</strong> 以 0 开头，所以不会出现 <code>1, 2, 03</code> 或者 <code>1, 02, 3</code> 的情况。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：&quot;112358&quot;</span><br><span class="line">输出：true </span><br><span class="line">解释：累加序列为: 1, 1, 2, 3, 5, 8 。1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：&quot;199100199&quot;</span><br><span class="line">输出：true </span><br><span class="line">解释：累加序列为: 1, 99, 100, 199。1 + 99 = 100, 99 + 100 = 199</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= num.length &lt;= 35</code></li><li><code>num</code> 仅由数字（<code>0</code> - <code>9</code>）组成</li></ul><p><strong>进阶：</strong>你计划如何处理由过大的整数输入导致的溢出?</p><hr><p>1、选择or不选择，放逗号分割</p><p>2、从答案视角(枚举选哪个)</p><p><font size = 5>处理输出溢出，java转换成字符串进位</font></p><hr><h3 id="按输入的角度来看"><a href="#按输入的角度来看" class="headerlink" title="按输入的角度来看"></a>按输入的角度来看</h3><p>python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isAdditiveNumber</span>(<span class="params">self, num: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(num)</span><br><span class="line">        path = []</span><br><span class="line">        ans = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i, start</span>):</span><br><span class="line">            <span class="keyword">if</span> i == n:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(path) &gt;= <span class="number">3</span>:</span><br><span class="line">                    <span class="keyword">nonlocal</span> ans</span><br><span class="line">                    ans = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">            <span class="keyword">if</span> i &lt; n - <span class="number">1</span>:</span><br><span class="line">                dfs(i + <span class="number">1</span>, start)</span><br><span class="line">            </span><br><span class="line">            s = num[start: i + <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">int</span>(s)) != s:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(path) &gt;= <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">if</span> path[-<span class="number">1</span>] + path[-<span class="number">2</span>] != <span class="built_in">int</span>(s):</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            path.append(<span class="built_in">int</span>(s))</span><br><span class="line">            dfs(i + <span class="number">1</span>, i + <span class="number">1</span>)</span><br><span class="line">            path.pop()</span><br><span class="line">        dfs(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAdditiveNumber</span><span class="params">(String num)</span> &#123;</span><br><span class="line">        n = num.length();</span><br><span class="line"></span><br><span class="line">        dfs(<span class="number">0</span>, <span class="number">0</span>, num);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> start, String num)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(path.size() &gt;= <span class="number">3</span>)&#123;</span><br><span class="line">                ans = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i &lt; n - <span class="number">1</span>)&#123;</span><br><span class="line">            dfs(i + <span class="number">1</span>, start, num);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; cur = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> start; j &lt;= i; j++)&#123;</span><br><span class="line">            cur.add(<span class="number">0</span>, num.charAt(j) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cur.size() &gt; <span class="number">1</span> &amp;&amp; cur.get(cur.size() - <span class="number">1</span>) == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(path.size() &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!check(path.get(path.size() - <span class="number">1</span>), path.get(path.size() - <span class="number">2</span>), cur))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        path.add(cur);</span><br><span class="line">        dfs(i + <span class="number">1</span>, i + <span class="number">1</span>, num);</span><br><span class="line">        path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//处理溢出</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(List&lt;Integer&gt; a, List&lt;Integer&gt; b, List&lt;Integer&gt; c)</span>&#123;</span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.size() || i &lt; b.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; a.size()) t += a.get(i);</span><br><span class="line">            <span class="keyword">if</span>(i &lt; b.size()) t += b.get(i);</span><br><span class="line">            ans.add(t % <span class="number">10</span>);</span><br><span class="line">            t /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t &gt; <span class="number">0</span>) ans.add(t);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">ok</span> <span class="operator">=</span> ans.size() == c.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; c.size() &amp;&amp; ok; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ans.get(i) != c.get(i)) ok = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ok;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>js代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isAdditiveNumber = <span class="keyword">function</span> (<span class="params">num</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> path = [];</span><br><span class="line">    <span class="keyword">let</span> ans = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> n = num.<span class="property">length</span>;</span><br><span class="line">    <span class="title function_">dfs</span>(<span class="number">0</span>, <span class="number">0</span>, num);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">dfs</span>(<span class="params">i, start, num</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (path.<span class="property">length</span> &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">                ans = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &lt; n - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="title function_">dfs</span>(i + <span class="number">1</span>, start, num);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> cur = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = start; j &lt;= i; j++) &#123;</span><br><span class="line">            cur.<span class="title function_">unshift</span>(num.<span class="title function_">charAt</span>(j) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cur.<span class="property">length</span> &gt; <span class="number">1</span> &amp;&amp; cur[cur.<span class="property">length</span> - <span class="number">1</span>] === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (path.<span class="property">length</span> &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_">check</span>(path[path.<span class="property">length</span> - <span class="number">1</span>], path[path.<span class="property">length</span> - <span class="number">2</span>], cur)) <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        path.<span class="title function_">push</span>(cur);</span><br><span class="line">        <span class="title function_">dfs</span>(i + <span class="number">1</span>, i + <span class="number">1</span>, num); </span><br><span class="line">        path.<span class="title function_">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">check</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> ans = [];</span><br><span class="line">        <span class="keyword">let</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="title class_">Math</span>.<span class="title function_">max</span>(a.<span class="property">length</span>, b.<span class="property">length</span>); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; a.<span class="property">length</span>) t += a[i];</span><br><span class="line">            <span class="keyword">if</span> (i &lt; b.<span class="property">length</span>) t += b[i];</span><br><span class="line">            ans.<span class="title function_">push</span>(t % <span class="number">10</span>);</span><br><span class="line">            t = <span class="title class_">Math</span>.<span class="title function_">floor</span>(t / <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (t &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            ans.<span class="title function_">push</span>(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> ok = ans.<span class="property">length</span> === c.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; c.<span class="property">length</span> &amp;&amp; ok; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ans[i] !== c[i]) ok = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ok;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="按答案的角度来看"><a href="#按答案的角度来看" class="headerlink" title="按答案的角度来看"></a>按答案的角度来看</h3><p>python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isAdditiveNumber</span>(<span class="params">self, num: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(num)</span><br><span class="line">        path = []</span><br><span class="line">        ans = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i</span>):</span><br><span class="line">            <span class="keyword">if</span> i == n:</span><br><span class="line">                <span class="keyword">nonlocal</span> ans</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">len</span>(path) &gt;= <span class="number">3</span>):</span><br><span class="line">                    ans = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, n):</span><br><span class="line">                s = num[i:j+<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">int</span>(s)) != s:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(path) &gt;= <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> path[-<span class="number">1</span>] + path[-<span class="number">2</span>] != <span class="built_in">int</span>(s):</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                path.append(<span class="built_in">int</span>(s))</span><br><span class="line">                dfs(j + <span class="number">1</span>)</span><br><span class="line">                path.pop()</span><br><span class="line">        dfs(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAdditiveNumber</span><span class="params">(String num)</span> &#123;</span><br><span class="line">        n = num.length();</span><br><span class="line">        dfs(<span class="number">0</span>, num);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, String num)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ans == <span class="literal">true</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(i == n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(path.size() &gt;= <span class="number">3</span>)&#123;</span><br><span class="line">                ans = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; cur = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> num.charAt(i) == <span class="string">&#x27;0&#x27;</span> ? i + <span class="number">1</span> : n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; max; j++)&#123;</span><br><span class="line">            cur.add(<span class="number">0</span>, num.charAt(j) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(path.size() &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!check(path.get(path.size() - <span class="number">1</span>), path.get(path.size() - <span class="number">2</span>), cur))</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            path.add(cur);</span><br><span class="line">            dfs(j + <span class="number">1</span>, num);</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(List&lt;Integer&gt; a, List&lt;Integer&gt; b, List&lt;Integer&gt; c)</span>&#123;</span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.size() || i &lt; b.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; a.size()) t += a.get(i);</span><br><span class="line">            <span class="keyword">if</span>(i &lt; b.size()) t += b.get(i);</span><br><span class="line">            ans.add(t % <span class="number">10</span>);</span><br><span class="line">            t /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t &gt; <span class="number">0</span>) ans.add(t);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">ok</span> <span class="operator">=</span> ans.size() == c.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; c.size() &amp;&amp; ok; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ans.get(i) != c.get(i)) ok = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ok;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
            <tag> 子集型回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LC 131 分割回文串</title>
      <link href="/2023/12/leetcode/LC%20131%20%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
      <url>/2023/12/leetcode/LC%20131%20%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="LC-131-分割回文串"><a href="#LC-131-分割回文串" class="headerlink" title="LC 131 分割回文串"></a>LC 131 分割回文串</h2><p>这是leetcode上的<a href="https://leetcode.cn/problems/palindrome-partitioning/description/"> 131分割回文串 </a>，这是一道中等题</p><p>给你一个字符串 <code>s</code>，请你将 <code>s</code> 分割成一些子串，使每个子串都是 <strong>回文串</strong> 。返回 <code>s</code> 所有可能的分割方案。</p><p><strong>回文串</strong> 是正着读和反着读都一样的字符串。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;aab&quot;</span><br><span class="line">输出：[[&quot;a&quot;,&quot;a&quot;,&quot;b&quot;],[&quot;aa&quot;,&quot;b&quot;]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;a&quot;</span><br><span class="line">输出：[[&quot;a&quot;]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 16</code></li><li><code>s</code> 仅由小写英文字母组成</li></ul><hr><p>枚举相邻两个字母之间要不要分割</p><p><img src="https://ammzz-1309932079.cos.ap-nanjing.myqcloud.com/typora_images202312011451314.png" alt="image.png"></p><p>枚举第一个逗号的位置（或者没有）</p><p>枚举第二个逗号的位置（或者没有）</p><p>回溯三问：</p><ol><li>当前操作？选择回文串 s[i, j], 加入path</li><li>子问题？从下标 &gt; i 的后缀中构造回文分割串</li><li>下一个子问题？从下标 &gt;&#x3D; j + 1 的后缀中构造回文分割</li></ol><p>dfs(i) -&gt; dfs(i + 1) &#x2F; dfs(i + 2) &#x2F; dfs(i + 3)</p><hr><p>python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">partition</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]:</span><br><span class="line">        ans = []</span><br><span class="line">        path = []</span><br><span class="line">        n = <span class="built_in">len</span>(s)</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i</span>):</span><br><span class="line">            <span class="keyword">if</span> i == n:</span><br><span class="line">                ans.append(path.copy())</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, n):</span><br><span class="line">                t = s[i: j + <span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> t == t[::-<span class="number">1</span>]:</span><br><span class="line">                    path.append(t)</span><br><span class="line">                    dfs(j + <span class="number">1</span>)</span><br><span class="line">                    path.pop()</span><br><span class="line">        dfs(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans  </span><br></pre></td></tr></table></figure><p><font size = 5>t &#x3D;&#x3D; t[ : : -1]判断回文</font></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LC 17 电话号码的数字组合</title>
      <link href="/2023/12/leetcode/LC%2017%20%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E6%95%B0%E5%AD%97%E7%BB%84%E5%90%88/"/>
      <url>/2023/12/leetcode/LC%2017%20%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E6%95%B0%E5%AD%97%E7%BB%84%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="LC-17-电话号码的数字组合"><a href="#LC-17-电话号码的数字组合" class="headerlink" title="LC 17 电话号码的数字组合"></a>LC 17 电话号码的数字组合</h2><p>这是leetcode上的<a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/solutions/2059416/hui-su-bu-hui-xie-tao-lu-zai-ci-pythonja-3orv/"> 17.电话号码的字母组合 </a>，难度为中等</p><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 <strong>任意顺序</strong> 返回。</p><p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p><p><img src="https://ammzz-1309932079.cos.ap-nanjing.myqcloud.com/typora_images202312011025517.png" alt="image.png"></p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：digits = &quot;23&quot;</span><br><span class="line">输出：[&quot;ad&quot;,&quot;ae&quot;,&quot;af&quot;,&quot;bd&quot;,&quot;be&quot;,&quot;bf&quot;,&quot;cd&quot;,&quot;ce&quot;,&quot;cf&quot;]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：digits = &quot;&quot;</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：digits = &quot;2&quot;</span><br><span class="line">输出：[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= digits.length &lt;= 4</code></li><li><code>digits[i]</code> 是范围 <code>[&#39;2&#39;, &#39;9&#39;]</code> 的一个数字。</li></ul><hr><p>用一个path保存路径</p><p>回溯三问：</p><ol><li>当前操作？枚举path[i]要填入的字母</li><li>子问题？构造字符串&gt;&#x3D; i的部分</li><li>下一个子问题？构造字符串&gt;&#x3D;i + 1的部分</li></ol><p>dfs(i) -&gt; dfs(i + 1)</p><hr><p>Python代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">MAPPING = <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;def&quot;</span>, <span class="string">&quot;ghi&quot;</span>, <span class="string">&quot;jkl&quot;</span>, <span class="string">&quot;mno&quot;</span>, <span class="string">&quot;pqrs&quot;</span>, <span class="string">&quot;tuv&quot;</span>, <span class="string">&quot;wxyz&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">letterCombinations</span>(<span class="params">self, digits: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        n = <span class="built_in">len</span>(digits)</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> ans</span><br><span class="line">        path = [<span class="string">&quot;&quot;</span>] * n</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i</span>):</span><br><span class="line">            <span class="keyword">if</span> i == n:</span><br><span class="line">                ans.append(<span class="string">&quot;&quot;</span>.join(path))</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> MAPPING[<span class="built_in">int</span>(digits[i])]:</span><br><span class="line">                path[i] = c</span><br><span class="line">                dfs(i + <span class="number">1</span>)</span><br><span class="line">        dfs(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">      </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LC 78 子集</title>
      <link href="/2023/12/leetcode/LC%2077%20%20%E7%BB%84%E5%90%88/"/>
      <url>/2023/12/leetcode/LC%2077%20%20%E7%BB%84%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="LC-78-子集"><a href="#LC-78-子集" class="headerlink" title="LC 78 子集"></a>LC 78 子集</h2><p>这是leetcode上的<a href="https://leetcode.cn/problems/combinations/">77. 组合</a>，难度为中等</p><p>给定两个整数 <code>n</code> 和 <code>k</code>，返回范围 <code>[1, n]</code> 中所有可能的 <code>k</code> 个数的组合。</p><p>你可以按 <strong>任何顺序</strong> 返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 4, k = 2</span><br><span class="line">输出：</span><br><span class="line">[</span><br><span class="line">  [2,4],</span><br><span class="line">  [3,4],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  [1,3],</span><br><span class="line">  [1,4],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 1, k = 1</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 20</code></li><li><code>1 &lt;= k &lt;= n</code></li></ul><hr><p>1、枚举下一个数选哪个</p><p>python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">combine</span>(<span class="params">self, n: <span class="built_in">int</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        ans = []</span><br><span class="line">        path = []</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i</span>):</span><br><span class="line">            d = k - <span class="built_in">len</span>(path)</span><br><span class="line">            <span class="keyword">if</span> d == <span class="number">0</span>:</span><br><span class="line">                ans.append(path.copy())</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, d - <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">                path.append(j)</span><br><span class="line">                dfs(j - <span class="number">1</span>)</span><br><span class="line">                path.pop()</span><br><span class="line">        dfs(n)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        dfs(n, k);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> k - path.size();</span><br><span class="line">        <span class="keyword">if</span>(d == <span class="number">0</span>)&#123;</span><br><span class="line">            ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n; i &gt;= d; i--)&#123;</span><br><span class="line">            path.add(i);</span><br><span class="line">            dfs(i - <span class="number">1</span>, k);</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>js代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> combine = <span class="keyword">function</span>(<span class="params">n, k</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> ans = [];</span><br><span class="line">    <span class="keyword">const</span> path = [];</span><br><span class="line">    <span class="title function_">dfs</span>(n, k);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">dfs</span>(<span class="params">n, k</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> d = k - path.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">if</span>(d === <span class="number">0</span>)&#123;</span><br><span class="line">            ans.<span class="title function_">push</span>([...path]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = n; i &gt;= d; i--)&#123;</span><br><span class="line">            path.<span class="title function_">push</span>(i);</span><br><span class="line">            <span class="title function_">dfs</span>(i - <span class="number">1</span>, k);</span><br><span class="line">            path.<span class="title function_">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>js代码2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ans = [];</span><br><span class="line"><span class="keyword">let</span> path = [];</span><br><span class="line"><span class="keyword">var</span> combine = <span class="keyword">function</span>(<span class="params">n, k</span>) &#123;</span><br><span class="line">    ans = [];</span><br><span class="line">    <span class="title function_">dfs</span>(n, k);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">dfs</span> = (<span class="params">n, k</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> d = k - path.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span>(d === <span class="number">0</span>)&#123;</span><br><span class="line">        ans.<span class="title function_">push</span>([...path]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = n; i &gt;= d; i--)&#123;</span><br><span class="line">        path.<span class="title function_">push</span>(i);</span><br><span class="line">        <span class="title function_">dfs</span>(i - <span class="number">1</span>, k);</span><br><span class="line">        path.<span class="title function_">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>2、这个数选or不选</p><p>python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">combine</span>(<span class="params">self, n: <span class="built_in">int</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        ans = []</span><br><span class="line">        path = []</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i</span>):</span><br><span class="line">            d = k - <span class="built_in">len</span>(path)</span><br><span class="line">            <span class="keyword">if</span> d == <span class="number">0</span>:</span><br><span class="line">                ans.append(path.copy())</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> i &gt; d:</span><br><span class="line">                dfs(i - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            path.append(i)</span><br><span class="line">            dfs(i - <span class="number">1</span>)</span><br><span class="line">            path.pop()</span><br><span class="line">        dfs(n)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        dfs(n, k);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> k - path.size();</span><br><span class="line">        <span class="keyword">if</span>(d == <span class="number">0</span>)&#123;</span><br><span class="line">            ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(n &gt; d)&#123;</span><br><span class="line">            dfs(n - <span class="number">1</span>, k);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        path.add(n);</span><br><span class="line">        dfs(n - <span class="number">1</span>, k);</span><br><span class="line">        path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>js代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> combine = <span class="keyword">function</span>(<span class="params">n, k</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> ans = [];</span><br><span class="line">    <span class="keyword">const</span> path = [];</span><br><span class="line">    <span class="title function_">dfs</span>(n);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">dfs</span>(<span class="params">n</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> d = k - path.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">if</span>(d === <span class="number">0</span>)&#123;</span><br><span class="line">            ans.<span class="title function_">push</span>([...path]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(n &gt; d)&#123;</span><br><span class="line">            <span class="title function_">dfs</span>(n - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        path.<span class="title function_">push</span>(n);</span><br><span class="line">        <span class="title function_">dfs</span>(n - <span class="number">1</span>);</span><br><span class="line">        path.<span class="title function_">pop</span>();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
            <tag> 组合型回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LC 78 子集</title>
      <link href="/2023/12/leetcode/LC%2078%20%E5%AD%90%E9%9B%86/"/>
      <url>/2023/12/leetcode/LC%2078%20%E5%AD%90%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="LC-78-子集"><a href="#LC-78-子集" class="headerlink" title="LC 78 子集"></a>LC 78 子集</h2><p>这是leetcode上的<a href="https://leetcode.cn/problems/subsets/description/"> 78子集 </a>，难度为中等</p><p>给你一个整数数组 <code>nums</code> ，数组中的元素 <strong>互不相同</strong> 。返回该数组所有可能的子集（幂集）。</p><p>解集 <strong>不能</strong> 包含重复的子集。你可以按 <strong>任意顺序</strong> 返回解集。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3]</span><br><span class="line">输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0]</span><br><span class="line">输出：[[],[0]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li><li><code>nums</code> 中的所有元素 <strong>互不相同</strong></li></ul><hr><p>子集型回溯</p><p>站在输入角度</p><p><img src="https://ammzz-1309932079.cos.ap-nanjing.myqcloud.com/typora_images202312011036997.png"></p><p>每个元素都可以选&#x2F;不选        </p><p>每个数可以在子集中（选）</p><p>也可以不在子集中（不选）</p><p>叶子是答案</p><p>回溯三问：</p><ol><li>当前操作？枚举第 i 个数选&#x2F;不选</li><li>子问题？从下标 &gt;&#x3D; i 的数字中构造子集</li><li>下一个子问题？从下标 &gt;&#x3D; i + 1 的数字中构造子集</li></ol><p>dfs(i) -&gt; dfs(i + 1)</p><p>站在答案角度<br><img src="https://ammzz-1309932079.cos.ap-nanjing.myqcloud.com/typora_images202312011046431.png"></p><p>枚举第一个数选谁</p><p>枚举第二个数选谁……</p><p> 每个节点都是答案</p><p><strong>注意：</strong></p><p><strong>[1, 2]和[2, 1]是重复的子集</strong></p><p><strong>为了避免重复，下一个数应大于当前选择的数</strong></p><p>回溯三问：</p><ol><li>当前操作？枚举一个下标 j &gt;&#x3D; i 的数字，加入path</li><li>子问题？从下标 &gt;&#x3D; i 的数字中构造子集</li><li>下一个子问题？从下标 &gt;&#x3D; j + 1 的数字中构造子集</li></ol><p>dfs(i) -&gt; dfs(i + 1) &#x2F; dfs(i + 2) &#x2F; dfs(i + 3)</p><hr><p>Python代码：</p><p>从输入角度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">subsets</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        ans = []</span><br><span class="line">        path = []</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i</span>):</span><br><span class="line">            <span class="keyword">if</span> i == n:</span><br><span class="line">                ans.append(path.copy())</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            dfs(i + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            path.append(nums[i])</span><br><span class="line">            dfs(i + <span class="number">1</span>)</span><br><span class="line">            path.pop()</span><br><span class="line"></span><br><span class="line">        dfs(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从答案角度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">subsets</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        ans = []</span><br><span class="line">        path = []</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i</span>):</span><br><span class="line">            ans.append(path.copy())</span><br><span class="line">            <span class="keyword">if</span> i == n:</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, n):</span><br><span class="line"></span><br><span class="line">                path.append(nums[j])</span><br><span class="line">                dfs(j + <span class="number">1</span>)</span><br><span class="line">                path.pop()</span><br><span class="line"></span><br><span class="line">        dfs(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LC 784 字母大小写全排列</title>
      <link href="/2023/12/leetcode/LC%20784%20%E5%AD%97%E6%AF%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E5%85%A8%E6%8E%92%E5%88%97/"/>
      <url>/2023/12/leetcode/LC%20784%20%E5%AD%97%E6%AF%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E5%85%A8%E6%8E%92%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="LC-784-字母大小写全排列"><a href="#LC-784-字母大小写全排列" class="headerlink" title="LC 784 字母大小写全排列"></a>LC 784 字母大小写全排列</h2><p>这是leetcode上的<a href="https://leetcode.cn/problems/letter-case-permutation/description/">784字母大小写全排列</a>，难度为<strong>中等</strong></p><p>给定一个字符串 <code>s</code> ，通过将字符串 <code>s</code> 中的每个字母转变大小写，我们可以获得一个新的字符串。</p><p>返回 <em>所有可能得到的字符串集合</em> 。以 <strong>任意顺序</strong> 返回输出。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;a1b2&quot;</span><br><span class="line">输出：[&quot;a1b2&quot;, &quot;a1B2&quot;, &quot;A1b2&quot;, &quot;A1B2&quot;]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;3z4&quot;</span><br><span class="line">输出: [&quot;3z4&quot;,&quot;3Z4&quot;]</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 12</code></li><li><code>s</code> 由小写英文字母、大写英文字母和数字组成</li></ul><hr><p>站在输入角度：</p><p>空的path构造答案，每次选一个填入</p><p>当前操作？path的这个位置填入一个</p><p>子问题？从 &gt;&#x3D; i 的字符串中确定答案</p><p>下一个子问题？从 &gt;&#x3D; i + 1 的字符串中确定答案</p><p>站在答案角度：</p><p>当前操作？确定[i, j] 的答案</p><p>子问题？从下标 &gt;&#x3D; i 的后缀中确定一段为最终答案</p><p>下一个子问题？ 从下标 &gt;&#x3D; j + 1 中确定下一段为最终答案</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;python字符确定</span></span><br><span class="line"><span class="string">字符串.isalnum() : 判断是否是数字字母的组合，如果包含空格返回False。</span></span><br><span class="line"><span class="string">字符串.isalpha() :  判断是否是字母，不区分大小写</span></span><br><span class="line"><span class="string">字符串.isdigit() : 判断是否是数字</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">字符串.isupper() : 判断是否全部为大写字母</span></span><br><span class="line"><span class="string">字符串.islower() : 判断是否全部为小写字母</span></span><br><span class="line"><span class="string">字符串.istitle() : 判断除首字母外全部都是小写</span></span><br><span class="line"><span class="string">字符串.lower(): 转为小写字母</span></span><br><span class="line"><span class="string">字符串.upper(): 转为大写字母</span></span><br><span class="line"><span class="string">字符串.swapcase(): 大写转小写，小写转大写</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><hr><p>python代码：</p><p>从输入角度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">letterCasePermutation</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        n = <span class="built_in">len</span>(s)</span><br><span class="line">        ans = []</span><br><span class="line">        path = [<span class="string">&quot;&quot;</span>] * n</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i</span>):</span><br><span class="line">            <span class="keyword">if</span> i == n:</span><br><span class="line">                ans.append(<span class="string">&quot;&quot;</span>.join(path))</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="string">&quot;直接选择&quot;</span></span><br><span class="line">            path[i] = s[i]</span><br><span class="line">            dfs(i + <span class="number">1</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="string">&quot;转换一下选择&quot;</span></span><br><span class="line">            <span class="keyword">if</span> s[i].isupper():</span><br><span class="line">                path[i] = s[i].lower()</span><br><span class="line">                dfs(i + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">elif</span> s[i].islower():</span><br><span class="line">                path[i] = s[i].upper()</span><br><span class="line">                dfs(i + <span class="number">1</span>)   </span><br><span class="line">        dfs(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>从答案角度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">letterCasePermutation</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        n = <span class="built_in">len</span>(s)</span><br><span class="line">        ans = []</span><br><span class="line">        path = <span class="built_in">list</span>(s)</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i</span>):</span><br><span class="line">            ans.append(<span class="string">&quot;&quot;</span>.join(path))</span><br><span class="line">            <span class="keyword">if</span> i == n:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="string">&quot;遍历答案将每个变或者不变&quot;</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, n):</span><br><span class="line">                <span class="keyword">if</span> path[j].isalpha():</span><br><span class="line">                    path[j] = path[j].swapcase()</span><br><span class="line">                    dfs(j + <span class="number">1</span>)</span><br><span class="line">                    path[j] = path[j].swapcase()</span><br><span class="line">        dfs(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
